from 'Dependencies/RayLib/RayLib.zpp' import [
  LogNone,
  init_window,
  close_window,
  toggle_fullscreen,
  set_target_fps_to_max,
  set_trace_log_level
]

from 'Game.zpp' import [
  Game -> PongGame,
  DifficultyLevel,
  DifficultyEasy, DifficultyMedium, DifficultyHard,
  create -> create_pong_game,
  drop -> drop_pong_game,
  run
]

from 'System.String' import [ String, drop -> drop_string ]
from 'System.Io'     import [ input ]
from 'System.Array'  import [ eq ]

fn input_option(prompt: String, option: *mut u8) -> Result:
  try input(prompt, out unparsed_option: String)
  defer unparsed_option.mut.drop_string()

  *option = unparsed_option.ref.eq(ref 'y')
  return .Ok

fn parse_difficulty(unparsed_difficulty: *String) -> DifficultyLevel:
  if unparsed_difficulty.eq(ref 'easy'):
    return DifficultyEasy
  
  if unparsed_difficulty.eq(ref 'hard'):
    return DifficultyHard
  
  return DifficultyMedium

-- * Entry point for the pong game
-- * The game logic is taken from 'https://thatonegamedev.com/cpp/prgramming-a-pong-game-in-ansi-c/'
fn main(argc: u32, argv: **u8) -> Result:
  clang_flags!('-lm')

  try input('Player1 Username: ', out player1username: String)
  try input('Player2 Username: ', out player2username: String)
  try input('Difficulty Level [easy, default(medium), hard]: ', out unparsed_difficulty: String)
  try input_option('Log FPS [y, default(n)]: ', out log_fps: u8)
  try input_option('Lock FPS [y, default(n)]: ', out lock_fps: u8)
  try input_option('Cornice [y, default(n)]: ', out cornice: u8)

  defer player1username.mut.drop_string()
  defer player2username.mut.drop_string()
  defer unparsed_difficulty.mut.drop_string()

  difficulty: DifficultyLevel = unparsed_difficulty.ref.parse_difficulty()

  if is_release_build!():
    set_trace_log_level(LogNone)

  init_window(0, 0, cstr!('PongGame'))
  toggle_fullscreen()

  if lock_fps:
    set_target_fps_to_max()

  pong: PongGame = create_pong_game(
    player1username,
    player2username,
    difficulty,
    log_fps,
    cornice
  )
  defer pong.mut.drop_pong_game()

  pong.mut.run()

  close_window()
  return .Ok