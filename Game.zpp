from 'Dependencies/RayLib/RayLib.zpp' import *
from 'System.String'                  import [ String ]
from 'System.Format'                  import [ format ]
from 'System.Math'                    import [ max ]

from 'Pad.zpp' import [
  Pad,
  create -> create_pad,
  drop -> drop_pad,
  update -> update_pad,
  draw -> draw_pad
]

from 'Ball.zpp' import [
  Ball,
  create_centered -> create_centered_ball,
  drop -> drop_ball,
  update -> update_ball,
  draw -> draw_ball,
  is_ball_colliding_with_pad,
  get_initial_ball_vel
]

type Game = (
  player1: Pad,
  player2: Pad,
  ball: Ball,
  width: f32,
  height: f32,
  log_fps: u8
)

fn create(player1username: String, player2username: String, log_fps: u8) -> Game:
  width: f32 = cast(f32)get_screen_width()
  height: f32 = cast(f32)get_screen_height()
  pad_size: Vec2 = (x: 10, y: 100)
  speed: f32 = 350

  return (
    player1: create_pad(
      (up_button: KeyW, down_button: KeyS),
      player1username,
      speed,
      (x: 20, y: height / 2),
      pad_size
    ),
    player2: create_pad(
      (up_button: KeyUp, down_button: KeyDown),
      player2username,
      speed,
      (x: width - 20 - pad_size.x, y: height / 2),
      pad_size
    ),
    ball: create_centered_ball(width, height),
    width: width,
    height: height,
    log_fps: log_fps
  )

fn drop(self: *mut Game) -> void:
  self.*.player1.mut.drop_pad()
  self.*.player2.mut.drop_pad()
  self.*.ball.mut.drop_ball()

fn run(self: *mut Game) -> void:
  while not window_should_close():
    self.update()

    begin_drawing()
    clear_background(get_black())
    self.draw()
    end_drawing()

fn draw(self: *Game) -> void:
  self.*.player1.ref.draw_pad()
  self.*.player2.ref.draw_pad()

  -- drawing the score before the ball
  -- allows the ball to graphically overwrite
  -- the text when passing over it
  self.draw_score()
  self.*.ball.ref.draw_ball()

  -- drawing the ui after all because
  -- it needs to graphically overwrite
  -- everything else
  self.draw_ui()

fn draw_ui(self: *Game) -> void:
  if self.*.log_fps:
    draw_fps(0, 0)

fn draw_score(self: *Game) -> void:
  font_size: i32 = 40

  -- building the text score for player 1 and 2
  txt1: *u8 = format('{s}: {u32}\0', args!(self.*.player1.username, self.*.player1.score)).ptr
  txt2: *u8 = format('{s}: {u32}\0', args!(self.*.player2.username, self.*.player2.score)).ptr
  -- this is useful to left-align the messages and avoid center-aligned texts
  bigger_txt_measure: f32 = max(cast(f32)measure_text(txt1, font_size), cast(f32)measure_text(txt2, font_size))

  -- this is the height distance between drawn txt1 and txt2
  offset: f32 = 10

  -- drawing player1 score
  x1: f32 = self.*.width / 2 - bigger_txt_measure / 2
  y1: f32 = self.*.height / 2 - cast(f32)font_size - offset
  draw_text(txt1, cast(i32)x1, cast(i32)y1, font_size, get_lightgray())

  -- drawing player2 score
  x2: f32 = self.*.width / 2 - bigger_txt_measure / 2
  y2: f32 = self.*.height / 2 + offset
  draw_text(txt2, cast(i32)x2, cast(i32)y2, font_size, get_lightgray())

fn update(self: *mut Game) -> void:
  self.*.player1.mut.update_pad(self.*.height)
  self.*.player2.mut.update_pad(self.*.height)

  self.*.ball.mut.update_ball()
  self.handle_ball_collisions()

fn handle_ball_collisions(self: *mut Game) -> void:
  if self.is_ball_colliding_with_pads():
    self.*.ball.vel.x *= -1
  
  if self.is_ball_colliding_with_edges():
    self.*.ball.vel.y *= -1

  if self.is_ball_colliding_with_right_side():
    self.score_to_player(mut self.*.player1)

  if self.is_ball_colliding_with_left_side():
    self.score_to_player(mut self.*.player2)

fn is_ball_colliding_with_pads(self: *Game) -> u8:
  return (
    self.*.ball.ref.is_ball_colliding_with_pad(ref self.*.player1) or
    self.*.ball.ref.is_ball_colliding_with_pad(ref self.*.player2)
  )

-- checks whether the ball is colliding with the top or bottom
fn is_ball_colliding_with_edges(self: *Game) -> u8:
  return (
    self.*.ball.pos.y >= self.*.height or
    self.*.ball.pos.y <= 0
  )

fn is_ball_colliding_with_right_side(self: *Game) -> u8:
  return self.*.ball.pos.x >= self.*.width

fn is_ball_colliding_with_left_side(self: *Game) -> u8:
  return self.*.ball.pos.x <= 0

fn score_to_player(self: *mut Game, player: *mut Pad) -> void:
  player.*.score += 1
  self.*.ball.pos = self.get_screen_center()
  self.*.ball.vel = get_initial_ball_vel()

fn get_screen_center(self: *Game) -> Vec2:
  return (
    x: self.*.width / 2,
    y: self.*.height / 2
  )