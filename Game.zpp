from 'Dependencies/RayLib/RayLib.zpp' import *
from 'System.String'                  import [ String ]

from 'Pad.zpp' import [
  Pad,
  create -> create_pad,
  drop -> drop_pad,
  update -> update_pad,
  draw -> draw_pad
]

from 'Ball.zpp' import [
  Ball,
  create_centered -> create_centered_ball,
  drop -> drop_ball,
  update -> update_ball,
  draw -> draw_ball,
  is_ball_colliding_with_pad,
  get_initial_ball_vel,
  reset_ball
]

from 'Ui.zpp' import *

-- indicates the speed of the ball
type DifficultyLevel = u8

DifficultyEasy:   DifficultyLevel = 0
DifficultyMedium: DifficultyLevel = 1
DifficultyHard:   DifficultyLevel = 2

type Game = (
  player1: Pad,
  player2: Pad,
  ball: Ball,
  width: f32,
  height: f32,
  difficulty: DifficultyLevel,
  is_paused: u8,
  is_help: u8,
  log_fps: u8,
  cornice: u8
)

fn create(
  player1username: String,
  player2username: String,
  difficulty: DifficultyLevel,
  log_fps: u8,
  cornice: u8
) -> Game:
  width: f32 = cast(f32)get_screen_width()
  height: f32 = cast(f32)get_screen_height()
  pad_size: Vec2 = (x: 10, y: 100)
  pad_movement_speed: f32 = 400

  return (
    player1: create_pad(
      (up_button: KeyW, down_button: KeyS),
      player1username,
      pad_movement_speed,
      (x: 20, y: height / 2),
      pad_size
    ),
    player2: create_pad(
      (up_button: KeyUp, down_button: KeyDown),
      player2username,
      pad_movement_speed,
      (x: width - 20 - pad_size.x, y: height / 2),
      pad_size
    ),
    ball: create_centered_ball(width, height, difficulty),
    width: width,
    height: height,
    difficulty: difficulty,
    is_paused: False,
    is_help: False,
    log_fps: log_fps,
    cornice: cornice
  )

fn drop(self: *mut Game) -> void:
  self.*.player1.mut.drop_pad()
  self.*.player2.mut.drop_pad()
  self.*.ball.mut.drop_ball()

fn run(self: *mut Game) -> void:
  while not window_should_close():
    self.update()
    self.pre_draw()

fn pre_draw(self: *Game) -> void:
  begin_drawing()
  clear_background(get_black())
  self.draw()
  end_drawing()

fn draw(self: *Game) -> void:
  self.*.player1.ref.draw_pad()
  self.*.player2.ref.draw_pad()

  -- drawing the sub ui before the ball
  -- allows the ball to graphically overwrite
  -- the text when passing over it
  -- this creates a cool effect
  self.draw_sub_ui()
  self.*.ball.ref.draw_ball()

  -- drawing the ui after all because
  -- it needs to graphically overwrite
  -- everything else
  self.draw_ui()

fn update(self: *mut Game) -> void:
  self.handle_keyboard_inputs()

  if self.*.is_paused:
    return
  
  self.*.player1.mut.update_pad(self.*.height)
  self.*.player2.mut.update_pad(self.*.height)

  self.*.ball.mut.update_ball()
  self.handle_ball_collisions()

fn handle_keyboard_inputs(self: *mut Game) -> void:
  KeyPause: KeyboardKey = KeySpace
  KeyHelp:  KeyboardKey = KeyH

  if is_key_pressed(KeyPause):
    self.toggle_pause_game()
    
  if is_key_pressed(KeyHelp):
    self.toggle_help_message()

fn toggle_pause_game(self: *mut Game) -> void:
  self.*.is_paused = not self.*.is_paused

fn toggle_help_message(self: *mut Game) -> void:
  self.*.is_help = not self.*.is_help

fn handle_ball_collisions(self: *mut Game) -> void:
  if self.is_ball_colliding_with_pads():
    self.*.ball.vel.x *= -1
  
  if self.is_ball_colliding_with_edges():
    self.*.ball.vel.y *= -1

  if self.is_ball_colliding_with_right_side():
    self.score_to_player(mut self.*.player1)

  if self.is_ball_colliding_with_left_side():
    self.score_to_player(mut self.*.player2)

fn is_ball_colliding_with_pads(self: *Game) -> u8:
  return (
    self.*.ball.ref.is_ball_colliding_with_pad(ref self.*.player1) or
    self.*.ball.ref.is_ball_colliding_with_pad(ref self.*.player2)
  )

-- checks whether the ball is colliding with the top or bottom
fn is_ball_colliding_with_edges(self: *Game) -> u8:
  return (
    self.*.ball.pos.y >= self.*.height or
    self.*.ball.pos.y <= 0
  )

fn is_ball_colliding_with_right_side(self: *Game) -> u8:
  return self.*.ball.pos.x >= self.*.width

fn is_ball_colliding_with_left_side(self: *Game) -> u8:
  return self.*.ball.pos.x <= 0

fn score_to_player(self: *mut Game, player: *mut Pad) -> void:
  player.*.score += 1
  self.*.ball.mut.reset_ball(
    self.*.width,
    self.*.height,
    self.*.difficulty
  )

fn get_screen_center(self: *Game) -> Vec2:
  return (
    x: self.*.width / 2,
    y: self.*.height / 2
  )